from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone

# Create your models here.
class Profile(models.Model):
    user = models.OneToOneField(User,on_delete=models.CASCADE,primary_key=True)
    phone = models.IntegerField()
    bio = models.TextField()
    age = models.IntegerField(default=0)
    gender = models.CharField(max_length=50,choices=(('male','male'),('female','female'),('others','others')))
    address = models.CharField(max_length=50)
    status = models.CharField(max_length=250,choices=[('single','Single'),('mingle','in a relationship'),('dual','Married'),('commited','commited')])
    active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True,blank=True)
    updated_at = models.DateTimeField(auto_now=True,blank=True)
    def __str__(self):
        return self.user.name

class Post(models.Model):
    author = models.ForeignKey(User,on_delete=models.CASCADE,related_name='author')
    post = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True,blank=True)
    updated_at = models.DateTimeField(auto_now=True,blank=True)
    status = models.BooleanField(default=False)

class Inbox(models.Model):
    sender = models.ForeignKey(to=User,on_delete=models.CASCADE,related_name='sender',null=True)
    reciever = models.ForeignKey(to=User,on_delete=models.CASCADE,related_name='reciever',null=True)
    message = models.TextField()
    status = models.BooleanField()
    created_at = models.DateTimeField(auto_now_add=True,blank=True)
    updated_at = models.DateTimeField(auto_now=True,blank=True)
    def __str__(self):
        return 'Message from : '+self.reciever.name

class Comment(models.Model):
    post = models.ForeignKey(Post,on_delete=models.CASCADE)
    comment = models.TextField()
    owner = models.ForeignKey(User,on_delete=models.CASCADE)
    status = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True,blank=True)
    updated_at = models.DateTimeField(auto_now=True,blank=True)
    def __str__(self):
        return self.comment

class Reply(models.Model):
    comment = models.ForeignKey(Comment,on_delete=models.CASCADE,blank=True,null=True)
    inbox = models.ForeignKey(Inbox,on_delete=models.CASCADE,blank=True,null=True)
    owner = models.ForeignKey(to=User,on_delete=models.CASCADE)
    reply = models.TextField()
    status = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True,blank=True)
    updated_at = models.DateTimeField(auto_now=True,blank=True)
    def __str__(self):
        return self.reply

class Images(models.Model):
    album = models.CharField(max_length=50)
    image = models.ImageField(upload_to='images')
    post_image = models.ForeignKey(Post,on_delete=models.CASCADE,related_name='post_image',blank=True,null=True)
    comment_image = models.ForeignKey(Comment,on_delete=models.CASCADE,related_name='comment_image',blank=True,null=True)
    inbox_image = models.ForeignKey(Inbox,on_delete=models.CASCADE,related_name='inbox_image',blank=True,null=True)
    reply_image = models.ForeignKey(Reply,on_delete=models.CASCADE,related_name='reply_image',blank=True,null=True)
    def __str__(self):
        return self.image+" = "+self.album

class Files(models.Model):
    files = models.FileField(upload_to='file',null=True)
    post_file = models.ForeignKey(Post,on_delete=models.CASCADE,related_name='post_file',blank=True,null=True)
    comment_file = models.ForeignKey(Comment,on_delete=models.CASCADE,related_name='comment_file',blank=True,null=True)
    inbox_file = models.ForeignKey(Inbox,on_delete=models.CASCADE,related_name='inbox_file',blank=True,null=True)
    reply_file = models.ForeignKey(Reply,on_delete=models.CASCADE,related_name='reply_file',blank=True,null=True)
    def __str__(self):
        return self.files

class Reacts(models.Model):
    react = models.CharField(max_length=10,choices=[('like','Like'),('dislike','Dislike'),('love','Love'),('angry','Angry'),('cry','cry')])
    owner = models.ForeignKey(to=User,on_delete=models.CASCADE)
    post_react = models.ForeignKey(Post,on_delete=models.CASCADE,blank=True,null=True)
    comment_react = models.ForeignKey(Comment,on_delete=models.CASCADE,blank=True,null=True)
    replies_react = models.ForeignKey(Reply,on_delete=models.CASCADE,blank=True,null=True)
    message_react = models.ForeignKey(Inbox,on_delete=models.CASCADE,blank=True,null=True)
    created_at = models.DateTimeField(auto_now_add=True,blank=True)
    updated_at = models.DateTimeField(auto_now=True,blank=True)
    def __str__(self):
        return self.react

class Follow(models.Model):
    following = models.ForeignKey(to=User,on_delete=models.CASCADE,related_name='following')
    followed_by = models.ForeignKey(to=User,on_delete=models.CASCADE,related_name='followed_by')
    status = models.BooleanField(default=False)
    types = models.CharField(max_length=50,choices=[('see_first','See first'),('follow','Follow'),('unfollow','Unfollow'),('reequest','request')],default='follow')
    created_at = models.DateTimeField(auto_now_add=True,blank=True)
    updated_at = models.DateTimeField(auto_now=True,blank=True)
    def __str__(self):
        return self.types

class Friends(models.Model):
    owner = models.ForeignKey(to=User,on_delete=models.CASCADE,related_name='owner')
    friend = models.ForeignKey(to=User,on_delete=models.CASCADE,related_name='friend')
    status = models.BooleanField(default=False)
    types = models.CharField(max_length=50,choices=[('close','close'),('family','family'),('friend','friend'),('reequest','request')],default='reequest')
    created_at = models.DateTimeField(auto_now_add=True,blank=True)
    updated_at = models.DateTimeField(auto_now=True,blank=True)